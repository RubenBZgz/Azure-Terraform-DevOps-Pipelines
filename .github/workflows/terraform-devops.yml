name: "Create Infra with Terraform"

on:
  #push:
    #branches: [Personal]
    #paths: .github/workflows/terraform-devops.yml
  
  pull_request:
    branches: none # [ main ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  WORKING_DIRECTORY: 05_Web_Sql_database
  BACKEND_TYPE: 'hcp' #'azurerm' is also supported
  REPOSITORY: ${{ github.repository }}

jobs:
  scan-terraform-config:
    runs-on: ubuntu-latest
    name: Scan Terraform with Checov
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Run Checkov Scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ env.WORKING_DIRECTORY }}
          soft_fail: true # optional: do not return an error code if there are failed checks
          # check: CKV_AWS_1 # optional: run only a specific check_id. can be comma separated list
          # skip_check: CKV_AWS_2 # optional: skip a specific check_id. can be comma separated list
          # quiet: true # optional: display only failed checks
          # framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
          # output_format: sarif # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif
          # download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
          # log_level: DEBUG # optional: set log level. Default WARNING
          # config_file: path/this_file
          # baseline: cloudformation/.checkov.baseline # optional: Path to a generated baseline file. Will only report results not in the baseline.
          # container_user: 1000 # optional: Define what UID and / or what GID to run the container under to prevent permission issues
  
  rotate-terraformHCP-Token:
    uses: RubenBZgz/Udemy-Houssem-Dellai-github-actions-course/.github/workflows/AA-rotate-terraformHCP-token.yml
    #uses: .github/workflows/AA-rotate-terraformHCP-token.yml
  
  
  deploy-azure-infra-terraform:
    name: Deploy to Azure with Terraform
    runs-on: ubuntu-latest
    environment: production
    needs: [scan-terraform-config]
    env: 
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}


    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Azure with Service Principal
        uses: Azure/login@v2
        with:
          # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
          # az role assignment create --assignee <service-principal-id> --role Contributor --scope /subscriptions/<subscription-id>
          # creds: ${#{ secrets.AZURE_CREDENTIALS }}
          auth-type: SERVICE_PRINCIPAL
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az account show
            az storage -h

      # Install the latest version of Terraform CLI
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3.1.0


      # AzureRM Backend Configuration
      - name: AzureRM Terraform Backend
        uses: Azure/cli@v2
        env:
          # All of this are backend settings
          BACKEND_STORAGE_ACCOUNT_NAME: ${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
          BACKEND_RESOURCE_GROUP_NAME: ${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}
          BACKEND_CONTAINER_NAME: ${{ secrets.BACKEND_CONTAINER_NAME }}
          BACKEND_KEY: ${{ secrets.BACKEND_KEY }}
        if: ${{ env.BACKEND_TYPE == 'azurerm' }}
        with:
          # Azure CLI version to be used to execute the script. If not provided, latest version is used
          # azcliversion: 2.34.1 # optional, default is agentazcliversion
          # #!/usr/bin/env pwsh

          # Ejecutado en BASH
          inlineScript: |
            az version

            echo 'Create Resource Group'
            exist=$(az group exists --name $BACKEND_RESOURCE_GROUP_NAME)
            echo "Existe: $exist"
            if [ "$exist"="false" ]; then
              az group create --name $BACKEND_RESOURCE_GROUP_NAME --location westeurope
            else 
              az group show --name $BACKEND_RESOURCE_GROUP_NAME
            fi


            echo 'Create storage account'
            exist=$(az storage account show --name $BACKEND_STORAGE_ACCOUNT_NAME --resource-group $BACKEND_RESOURCE_GROUP_NAME)
            echo "Existe: $exist"
            if [ -z "$exist" ]; then
              az storage account create --name $BACKEND_STORAGE_ACCOUNT_NAME \
                --resource-group $BACKEND_RESOURCE_GROUP_NAME \
                --sku Standard_LRS \
                --encryption-services blob
            else 
              az storage account show --name $BACKEND_STORAGE_ACCOUNT_NAME --resource-group $BACKEND_RESOURCE_GROUP_NAME
            fi


            echo 'Create Blob container'
            exist=$(az storage container show --name $BACKEND_CONTAINER_NAME --account-name $BACKEND_STORAGE_ACCOUNT_NAME)
            if [ -z "$exist" ]; then
              az storage container create \
                --resource-group $BACKEND_RESOURCE_GROUP_NAME \
                --account-name $BACKEND_STORAGE_ACCOUNT_NAME \
                --name $BACKEND_CONTAINER_NAME 
            else 
              az storage container show \
                --account-name $BACKEND_STORAGE_ACCOUNT_NAME \
                --name $BACKEND_CONTAINER_NAME 
            fi

            # generate backend.tf file
            # cd $WORKING_DIRECTORY
            if [ ! -f ./backend.tf ]; then
              echo "backend.tf not found!"


              cat <<EOT > backend.tf
            terraform {
              backend "azurerm" {
                resource_group_name   = "$BACKEND_RESOURCE_GROUP_NAME"
                storage_account_name  = "$BACKEND_STORAGE_ACCOUNT_NAME"
                container_name        = "$BACKEND_CONTAINER_NAME"
                key                   = "$BACKEND_KEY"
              } 
            }
            EOT
              
              cat backend.tf

            fi

      # HCP Terraform Backend Configuration
      - name: HCP Terraform Backend
        env:
          HCP_ORGANIZATION: ${{ secrets.HCP_ORGANIZATION }}
          HCP_WORKSPACE: ${{ secrets.HCP_WORKSPACE }}
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        if: ${{ env.BACKEND_TYPE == 'hcp' }}
        run: |
          if [ ! -f ./backend.tf ]; then
            echo "backend.tf not found!"


            cat <<EOT > backend.tf
          terraform {
            cloud {
              organization = "$HCP_ORGANIZATION"

              workspaces {
                name = "$HCP_WORKSPACE"
              }
              #token = "$TF_TOKEN_app_terraform_io"

            }
          }
          EOT
            
            cat backend.tf

          fi

      - name: Terraform Init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: |
          # Initialize a new or existing Terraform working directory by creating initial files, 
          # loading any remote state, downloading modules, etc.
          if [ ! -f ./backend.tf ]; then
            echo "backend.tf not found!"
          else
            cat backend.tf
          fi
          terraform init -input=false

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        id: format
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        #i f: github.event_name == 'pull_request' # 'push' #
        run: |
          #az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          terraform plan -out tfplan -input=false

          # # show the tfplan file
          # terraform show -json tfplan
          # terraform show -json tfplan >> tfplan.json
          # # Format tfplan.json file
          # terraform show -json tfplan | jq '.' > tfplan.json
          # 
          # # show only the changes
          # cat tfplan.json | jq '[.resource_changes[] | {type: .type, name: .change.after.name, actions: .change.actions[]}]' 
          # cat tfplan.json | jq -r '(.resource_changes[] | [.change.actions[], .type, .change.after.name]) | @tsv'

      # Terraform login is not necessary as we are using TF_TOKEN_app_terraform_io secret
      - name: Add Terraform Plan Comment
        uses: actions/github-script@v7.0.0
        #i f: github.event_name == 'pull_request' # 'push'
        if: github.event_name == 'prueba123'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.format.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Terraform login is not necessary as we are using TF_TOKEN_app_terraform_io secret
      - name: Terraform Apply
        #i f: github.ref == 'refs/heads/main' && github.event_name == 'push'
        #env:
          #ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          #ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          #ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          #ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: echo 'funciona' #terraform apply -auto-approve -input=false tfplan
