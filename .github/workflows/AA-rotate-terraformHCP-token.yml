name: AA-rotate-terraformHCP-token

on:
  push:
    branches: [Personal]
  schedule:
    - cron: "0 0 1 * *" # Runs on the 1st of every month. 30 days of expiration time

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  check-token:
    runs-on: ubuntu-latest
    steps:
      - name: Check PAT Validity
        env:
          MY_PAT: ${{ secrets.PAT_RENEW_SECRET_KEY }}
        run: |
          curl -H "Authorization: token $MY_PAT" https://api.github.com/user || exit 1


  rotate-token:
    runs-on: ubuntu-latest

    # Inside my workspace, I'm going to use a Team Token for GitHub Actions.
    # In my case, It uses owners team, however, you should create a new team with limitations.
    steps:
      - name: Checkout repository
        uses: actions/checkout@master
      
      - name: Curl Prueba
        env:
          HCP_ORGANIZATION: ${{ secrets.HCP_ORGANIZATION }}
          OLD_TOKEN: ${{ secrets.TF_API_TOKEN }}
          GH_TOKEN: ${{ secrets.PAT_RENEW_SECRET_KEY }}
          TOKEN_PRUEBA: ${{ vars.PRUEBA }}

        run: |
          TOKEN=$TOKEN_PRUEBA
          ORGANIZATION=$HCP_ORGANIZATION
          echo "TOKEN PRUEBA: $TOKEN"
          echo "https://app.terraform.io/api/v2/organizations/$ORGANIZATION/teams"

          RESPONSE=$(curl \
            --header "Authorization: Bearer $TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            --request GET https://app.terraform.io/api/v2/organizations/$ORGANIZATION/teams)
          
            echo "RESPONSE: $RESPONSE"

          # Use jq to parse and get the value of "id"
          team_id=$(echo "$RESPONSE" | jq -r '.data.[0]')
          echo "Team ID: $team_id"


      - name: Rotate Terraform API Token
        env:
          HCP_ORGANIZATION: ${{ secrets.HCP_ORGANIZATION }}
          OLD_TOKEN: ${{ secrets.TF_API_TOKEN }}
          GH_TOKEN: ${{ secrets.PAT_RENEW_SECRET_KEY }}
          TOKEN_PRUEBA: ${{ env.PRUEBA }}

        run: |
          # Example of how you could interact with the Terraform API to rotate the token
          # and then update the GitHub secret with the new token.
          BACKEND_ORGANIZATION=$HCP_ORGANIZATION
          OLD_TOKEN=$OLD_TOKEN
          AUTH_HEADER="Authorization: Bearer $OLD_TOKEN"
          NEW_TOKEN=$(curl -X POST https://app.terraform.io/api/v2/organizations/$BACKEND_ORGANIZATION/authentication-tokens -H "$AUTH_HEADER" | jq .new_token)
          
          echo "TOKEN PRUEBA: $TOKEN_PRUEBA"
          curl \
            --header "Authorization: Bearer $TOKEN_PRUEBA" \
            --header "Content-Type: application/vnd.api+json" \
            --request GET \
            https://app.terraform.io/api/v2/organizations/my-organization/teams


          echo "Antiguo Token"
          echo "NEW_TOKEN: $NEW_TOKEN"

          # Check if the new token was successfully retrieved
          if [ -n "$NEW_TOKEN" ]; then
            # Update GitHub secret with the new token
            #gh secret set TF_API_TOKEN -b "$NEW_TOKEN"
            echo "GitHub secret updated successfully."
          else
            echo "Failed to retrieve new token."
            exit 1
          fi
